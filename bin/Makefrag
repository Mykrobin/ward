# -*- makefile-gmake -*-

$(O)/bin/%.o: CFLAGS:=$(CFLAGS)
$(O)/bin/%.o: CXXFLAGS:=$(CXXFLAGS)

ifeq ($(PLATFORM),xv6)
  $(O)/bin/%.o: CFLAGS:=-std=c11 -g -MD -MP -O3 -Wall -DHW_$(HW) -iquote $(O)/include -DXV6_USER
  $(O)/bin/%.o: CXXFLAGS:=-std=c++14 -g -MD -MP -O3 -Wall -DHW_$(HW) -iquote $(O)/include -isystem include -include libutil/include/compiler.h -include param.h -DXV6_USER
endif

UPROGS_BIN= \
	init \

# Binaries that are known to build on PLATFORM=native
UPROGS_NATIVE := \
	allocbench \
	base64 \
	benchhdr \
	cat \
	cp \
	crwpbench \
	dd \
	dirbench \
	echo \
	fdbench \
	filebench \
	forktest \
	halt \
	init \
	linkbench \
	ls \
	mail-deliver \
	mail-enqueue \
	mail-qman \
	mailbench \
	mailfilter \
	mapbench \
	mkdir \
	mount \
	mv \
	sh \
	tee \
	vmimbalbench \
	anon \
	getpid \
	smallfile \
	lebench \

# ifeq ($(HAVE_LWIP),y)
#   UPROGS_BIN += telnetd httpd
# endif

ifeq ($(HAVE_TESTGEN),y)
  UPROGS_BIN    += fstest
  UPROGS_NATIVE += fstest
endif

FSCONTENTS := $(addprefix $(O)/fs/bin/, $(UPROGS_BIN)) \
              $(addprefix $(O)/fs/bin/, $(notdir $(wildcard git/root/bin/git))) \
              $(addprefix $(O)/fs/, $(notdir $(wildcard lwip))) \
              $(O)/fs/bin/unittests.sh \
              $(O)/fs/intel-ucode \
              $(O)/fs/bin/busybox \

# (ULIBA will be empty for native builds)
UPROGS_LIBS := $(ULIBA)

ifeq ($(PLATFORM),native)
  ALL += $(addprefix $(O)/bin/, $(UPROGS_NATIVE))
  LINK_CMD_BEGIN := $(Q)$(CXX) $(CXXFLAGS)
  LINK_CMD_END :=  -Wl,--start-group $(UPROGS_LIBS) -Wl,--end-group $(ULIB_END)
  # Statically link for the Linux environment so we can create a trivial
  # initramfs without libraries
  LINK_CMD_END := $(LINK_CMD_END) -static
  # Unfortunately, the weak symbols in libpthread mean pthreads don't
  # work with static linking unless we force the linker to include the
  # whole archive.  This is, apparently, "not a bug"
  # (http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52590).
  LINK_CMD_BEGIN += -Wl,--whole-archive -lpthread -Wl,--no-whole-archive
  # Build an initramfs
  $(O)/initramfs: $(addprefix $(O)/bin/, $(UPROGS_NATIVE))
	@echo "  CPIO   $@"
	$(Q)(cd $(<D); ls -1 $(^F) | cpio -o -H newc) > $@
  ALL += $(O)/initramfs
else
  LINK_CMD_BEGIN := $(Q)$(LD) $(LDFLAGS)
  LINK_CMD_END :=  --start-group $(UPROGS_LIBS) --end-group $(ULIB_END)
endif

$(O)/bin/%.unstripped: $(O)/bin/%.o $(O)/lib/sysstubs.o
	@echo "  LD     $@"
	$(Q)mkdir -p $(@D)
	$(Q)$(CXX) -static -o $@ $^
$(O)/fs/bin/%: $(O)/bin/%.unstripped
	@echo "  STRIP  $@"
	$(Q)mkdir -p $(@D)
	$(Q)$(STRIP) -o $@ $<
$(O)/fs/bin/%: bin/%
	$(Q)mkdir -p $(@D)
	$(Q)cp $< $@
$(O)/fs/intel-ucode: intel-ucode
	$(Q)mkdir -p $(@D)
	$(Q)cp -r $< $@
$(O)/fs/bin/git: git/root/bin/git
	$(Q)mkdir -p $(O)/fs/bin
	$(Q)cp -r git/root/bin/git $(O)/fs/bin/git
$(O)/fs/lwip: lwip
	$(Q)cp -r lwip $(O)/fs/lwip

ifeq ($(PLATFORM),xv6)
  # Assume everything inclues user.h, which includes sysstubs.h
  $(patsubst %,$(O)/bin/%.o,$(UPROGS_BIN)): $(O)/include/sysstubs.h
endif

.PRECIOUS: $(O)/bin/%.o $(O)/bin/%.unstripped
-include $(O)/bin/*.d
